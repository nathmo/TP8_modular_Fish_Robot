   1              		.cpu arm7tdmi-s
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"sysTime.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.align	2
  17              		.global	initSysTime
  19              	initSysTime:
  20              	.LFB0:
  21              		.file 1 "../firmware/sysTime.c"
   1:../firmware/sysTime.c **** /******************************************************************************
   2:../firmware/sysTime.c ****  *
   3:../firmware/sysTime.c ****  * This module provides the interface routines for initializing and
   4:../firmware/sysTime.c ****  * accessing the system timing functions.
   5:../firmware/sysTime.c ****  * Copyright 2004, R O SoftWare
   6:../firmware/sysTime.c ****  * No guarantees, warrantees, or promises, implied or otherwise.
   7:../firmware/sysTime.c ****  * May be used for hobby or commercial purposes provided copyright
   8:../firmware/sysTime.c ****  * notice remains intact.
   9:../firmware/sysTime.c ****  *
  10:../firmware/sysTime.c ****  *****************************************************************************/
  11:../firmware/sysTime.c **** #include "LPC21xx.h"
  12:../firmware/sysTime.c **** #include "hwconfig.h"
  13:../firmware/sysTime.c **** #include "sysTime.h"
  14:../firmware/sysTime.c **** 
  15:../firmware/sysTime.c **** static uint32_t sysTICs;
  16:../firmware/sysTime.c **** static uint32_t lastT0TC;
  17:../firmware/sysTime.c **** 
  18:../firmware/sysTime.c **** /******************************************************************************
  19:../firmware/sysTime.c ****  *
  20:../firmware/sysTime.c ****  * Function Name: initSysTime()
  21:../firmware/sysTime.c ****  *
  22:../firmware/sysTime.c ****  * Description:
  23:../firmware/sysTime.c ****  *    This function initializes the LPC's Timer 0 for use as the system timer.
  24:../firmware/sysTime.c ****  *
  25:../firmware/sysTime.c ****  * Calling Sequence:
  26:../firmware/sysTime.c ****  *    void
  27:../firmware/sysTime.c ****  *
  28:../firmware/sysTime.c ****  * Returns:
  29:../firmware/sysTime.c ****  *    void
  30:../firmware/sysTime.c ****  *
  31:../firmware/sysTime.c ****  *****************************************************************************/
  32:../firmware/sysTime.c **** void initSysTime(void)
  33:../firmware/sysTime.c **** {
  22              		.loc 1 33 0
  23              		.cfi_startproc
  24              		@ Function supports interworking.
  25              		@ args = 0, pretend = 0, frame = 0
  26              		@ frame_needed = 0, uses_anonymous_args = 0
  27              		@ link register save eliminated.
  34:../firmware/sysTime.c ****   // setup Timer 0 to count forever
  35:../firmware/sysTime.c ****   T0TCR = TCR_RESET;                    // reset & disable timer 0
  28              		.loc 1 35 0
  29 0000 2C309FE5 		ldr	r3, .L2
  30 0004 0220A0E3 		mov	r2, #2
  31 0008 042083E5 		str	r2, [r3, #4]
  36:../firmware/sysTime.c ****   T0PR = T0_PCLK_DIV - 1;               // set the prescale divider
  37:../firmware/sysTime.c ****   T0MCR = 0;                            // disable match registers
  38:../firmware/sysTime.c ****   T0CCR = 0;                            // disable compare registers
  39:../firmware/sysTime.c ****   T0EMR = 0;                            // disable external match register
  40:../firmware/sysTime.c ****   T0TCR = TCR_ENABLE;                   // enable timer 0
  32              		.loc 1 40 0
  33 000c 0110A0E3 		mov	r1, #1
  36:../firmware/sysTime.c ****   T0PR = T0_PCLK_DIV - 1;               // set the prescale divider
  34              		.loc 1 36 0
  35 0010 0C2083E5 		str	r2, [r3, #12]
  37:../firmware/sysTime.c ****   T0MCR = 0;                            // disable match registers
  36              		.loc 1 37 0
  37 0014 0020A0E3 		mov	r2, #0
  38 0018 142083E5 		str	r2, [r3, #20]
  38:../firmware/sysTime.c ****   T0CCR = 0;                            // disable compare registers
  39              		.loc 1 38 0
  40 001c 282083E5 		str	r2, [r3, #40]
  39:../firmware/sysTime.c ****   T0EMR = 0;                            // disable external match register
  41              		.loc 1 39 0
  42 0020 3C2083E5 		str	r2, [r3, #60]
  43              		.loc 1 40 0
  44 0024 041083E5 		str	r1, [r3, #4]
  41:../firmware/sysTime.c ****   sysTICs = 0;
  45              		.loc 1 41 0
  46 0028 08309FE5 		ldr	r3, .L2+4
  47 002c 002083E5 		str	r2, [r3, #0]
  48 0030 1EFF2FE1 		bx	lr
  49              	.L3:
  50              		.align	2
  51              	.L2:
  52 0034 004000E0 		.word	-536854528
  53 0038 00000000 		.word	.LANCHOR0
  54              		.cfi_endproc
  55              	.LFE0:
  57              		.align	2
  58              		.global	getSysTICs
  60              	getSysTICs:
  61              	.LFB1:
  42:../firmware/sysTime.c **** }
  43:../firmware/sysTime.c **** 
  44:../firmware/sysTime.c **** /******************************************************************************
  45:../firmware/sysTime.c ****  *
  46:../firmware/sysTime.c ****  * Function Name: getSysTICs()
  47:../firmware/sysTime.c ****  *
  48:../firmware/sysTime.c ****  * Description:
  49:../firmware/sysTime.c ****  *    This function returns the current system time in TICs.
  50:../firmware/sysTime.c ****  *
  51:../firmware/sysTime.c ****  * Calling Sequence:
  52:../firmware/sysTime.c ****  *    void
  53:../firmware/sysTime.c ****  *
  54:../firmware/sysTime.c ****  * Returns:
  55:../firmware/sysTime.c ****  *    The current time in TICs as represented by sysTICs
  56:../firmware/sysTime.c ****  *
  57:../firmware/sysTime.c ****  *****************************************************************************/
  58:../firmware/sysTime.c **** uint32_t getSysTICs(void)
  59:../firmware/sysTime.c **** {
  62              		.loc 1 59 0
  63              		.cfi_startproc
  64              		@ Function supports interworking.
  65              		@ args = 0, pretend = 0, frame = 0
  66              		@ frame_needed = 0, uses_anonymous_args = 0
  67              		@ link register save eliminated.
  60:../firmware/sysTime.c ****   uint32_t now = T0TC;
  68              		.loc 1 60 0
  69 003c 1C309FE5 		ldr	r3, .L5
  70 0040 082093E5 		ldr	r2, [r3, #8]
  71              	.LVL0:
  61:../firmware/sysTime.c **** 
  62:../firmware/sysTime.c ****   sysTICs += (uint32_t)(now - lastT0TC);
  72              		.loc 1 62 0
  73 0044 18309FE5 		ldr	r3, .L5+4
  74 0048 000093E5 		ldr	r0, [r3, #0]
  75 004c 041093E5 		ldr	r1, [r3, #4]
  76 0050 000082E0 		add	r0, r2, r0
  77 0054 000061E0 		rsb	r0, r1, r0
  63:../firmware/sysTime.c ****   lastT0TC = now;
  78              		.loc 1 63 0
  79 0058 050083E8 		stmia	r3, {r0, r2}
  64:../firmware/sysTime.c ****   return sysTICs;
  65:../firmware/sysTime.c **** }
  80              		.loc 1 65 0
  81 005c 1EFF2FE1 		bx	lr
  82              	.L6:
  83              		.align	2
  84              	.L5:
  85 0060 004000E0 		.word	-536854528
  86 0064 00000000 		.word	.LANCHOR0
  87              		.cfi_endproc
  88              	.LFE1:
  90              		.align	2
  91              		.global	getElapsedSysTICs
  93              	getElapsedSysTICs:
  94              	.LFB2:
  66:../firmware/sysTime.c **** 
  67:../firmware/sysTime.c **** 
  68:../firmware/sysTime.c **** /******************************************************************************
  69:../firmware/sysTime.c ****  *
  70:../firmware/sysTime.c ****  * Function Name: getElapsedSysTICs()
  71:../firmware/sysTime.c ****  *
  72:../firmware/sysTime.c ****  * Description:
  73:../firmware/sysTime.c ****  *    This function then returns the difference in TICs between the
  74:../firmware/sysTime.c ****  *    given starting time and the current system time.
  75:../firmware/sysTime.c ****  *
  76:../firmware/sysTime.c ****  * Calling Sequence:
  77:../firmware/sysTime.c ****  *    The starting time.
  78:../firmware/sysTime.c ****  *
  79:../firmware/sysTime.c ****  * Returns:
  80:../firmware/sysTime.c ****  *    The time difference.
  81:../firmware/sysTime.c ****  *
  82:../firmware/sysTime.c ****  *****************************************************************************/
  83:../firmware/sysTime.c **** uint32_t getElapsedSysTICs(uint32_t startTime)
  84:../firmware/sysTime.c **** {
  95              		.loc 1 84 0
  96              		.cfi_startproc
  97              		@ Function supports interworking.
  98              		@ args = 0, pretend = 0, frame = 0
  99              		@ frame_needed = 0, uses_anonymous_args = 0
 100              	.LVL1:
 101 0068 10402DE9 		stmfd	sp!, {r4, lr}
 102              	.LCFI0:
 103              		.cfi_def_cfa_offset 8
 104              		.cfi_offset 4, -8
 105              		.cfi_offset 14, -4
 106              		.loc 1 84 0
 107 006c 0040A0E1 		mov	r4, r0
  85:../firmware/sysTime.c ****   return getSysTICs() - startTime;
 108              		.loc 1 85 0
 109 0070 FEFFFFEB 		bl	getSysTICs
 110              	.LVL2:
  86:../firmware/sysTime.c **** }
 111              		.loc 1 86 0
 112 0074 000064E0 		rsb	r0, r4, r0
 113 0078 1040BDE8 		ldmfd	sp!, {r4, lr}
 114 007c 1EFF2FE1 		bx	lr
 115              		.cfi_endproc
 116              	.LFE2:
 118              		.align	2
 119              		.global	pause
 121              	pause:
 122              	.LFB3:
  87:../firmware/sysTime.c **** 
  88:../firmware/sysTime.c **** 
  89:../firmware/sysTime.c **** /******************************************************************************
  90:../firmware/sysTime.c ****  *
  91:../firmware/sysTime.c ****  * Function Name: pause()
  92:../firmware/sysTime.c ****  *
  93:../firmware/sysTime.c ****  * Description:
  94:../firmware/sysTime.c ****  *    This function does not return until the specified 'duration' in
  95:../firmware/sysTime.c ****  *    TICs has elapsed.
  96:../firmware/sysTime.c ****  *
  97:../firmware/sysTime.c ****  * Calling Sequence:
  98:../firmware/sysTime.c ****  *    duration - length of time in TICs to wait before returning
  99:../firmware/sysTime.c ****  *
 100:../firmware/sysTime.c ****  * Returns:
 101:../firmware/sysTime.c ****  *    void
 102:../firmware/sysTime.c ****  *
 103:../firmware/sysTime.c ****  *****************************************************************************/
 104:../firmware/sysTime.c **** void pause(uint32_t duration)
 105:../firmware/sysTime.c **** {
 123              		.loc 1 105 0
 124              		.cfi_startproc
 125              		@ Function supports interworking.
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 0, uses_anonymous_args = 0
 128              	.LVL3:
 129 0080 38402DE9 		stmfd	sp!, {r3, r4, r5, lr}
 130              	.LCFI1:
 131              		.cfi_def_cfa_offset 16
 132              		.cfi_offset 3, -16
 133              		.cfi_offset 4, -12
 134              		.cfi_offset 5, -8
 135              		.cfi_offset 14, -4
 136              		.loc 1 105 0
 137 0084 0040A0E1 		mov	r4, r0
 106:../firmware/sysTime.c ****   uint32_t startTime = getSysTICs();
 138              		.loc 1 106 0
 139 0088 FEFFFFEB 		bl	getSysTICs
 140              	.LVL4:
 141 008c 0050A0E1 		mov	r5, r0
 142              	.LVL5:
 143              	.L9:
 144              	.LBB4:
 145              	.LBB5:
  85:../firmware/sysTime.c ****   return getSysTICs() - startTime;
 146              		.loc 1 85 0 discriminator 1
 147 0090 FEFFFFEB 		bl	getSysTICs
 148              	.LVL6:
 149 0094 000065E0 		rsb	r0, r5, r0
 150              	.LBE5:
 151              	.LBE4:
 107:../firmware/sysTime.c **** 
 108:../firmware/sysTime.c ****   while (getElapsedSysTICs(startTime) < duration)
 152              		.loc 1 108 0 discriminator 1
 153 0098 040050E1 		cmp	r0, r4
 154 009c FBFFFF3A 		bcc	.L9
 109:../firmware/sysTime.c ****     WDOG();
 110:../firmware/sysTime.c **** }
 155              		.loc 1 110 0
 156 00a0 3840BDE8 		ldmfd	sp!, {r3, r4, r5, lr}
 157 00a4 1EFF2FE1 		bx	lr
 158              		.cfi_endproc
 159              	.LFE3:
 161              		.bss
 162              		.align	2
 163              		.set	.LANCHOR0,. + 0
 166              	sysTICs:
 167 0000 00000000 		.space	4
 170              	lastT0TC:
 171 0004 00000000 		.space	4
 172              		.text
 173              	.Letext0:
 174              		.file 2 "../firmware/lpcTMR.h"
 175              		.file 3 "c:/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:00000000 sysTime.c
C:\Users\ncmorand\AppData\Local\Temp\ccn54m66.s:16     .text:00000000 $a
C:\Users\ncmorand\AppData\Local\Temp\ccn54m66.s:19     .text:00000000 initSysTime
C:\Users\ncmorand\AppData\Local\Temp\ccn54m66.s:52     .text:00000034 $d
C:\Users\ncmorand\AppData\Local\Temp\ccn54m66.s:57     .text:0000003c $a
C:\Users\ncmorand\AppData\Local\Temp\ccn54m66.s:60     .text:0000003c getSysTICs
C:\Users\ncmorand\AppData\Local\Temp\ccn54m66.s:85     .text:00000060 $d
C:\Users\ncmorand\AppData\Local\Temp\ccn54m66.s:90     .text:00000068 $a
C:\Users\ncmorand\AppData\Local\Temp\ccn54m66.s:93     .text:00000068 getElapsedSysTICs
C:\Users\ncmorand\AppData\Local\Temp\ccn54m66.s:121    .text:00000080 pause
C:\Users\ncmorand\AppData\Local\Temp\ccn54m66.s:162    .bss:00000000 $d
C:\Users\ncmorand\AppData\Local\Temp\ccn54m66.s:166    .bss:00000000 sysTICs
C:\Users\ncmorand\AppData\Local\Temp\ccn54m66.s:170    .bss:00000004 lastT0TC
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
